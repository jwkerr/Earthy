plugins {
    id "fabric-loom" version "1.9-SNAPSHOT"
}

remapJar {
    archiveFileName = "earthy-${project.name}-${project.version}.jar"
}

repositories {
    maven {
        name = "Terraformers"
        url = "https://maven.terraformersmc.com/"
    }

    maven {
        name = "Xander Maven"
        url = "https://maven.isxander.dev/releases"
    }

    maven { url = "https://jitpack.io" }

    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    include implementation("com.github.jwkerr:EMCAPIClient:e36d646791")

    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
    modImplementation "dev.isxander:yet-another-config-lib:${project.yacl_version}"
    include modImplementation("net.kyori:adventure-platform-fabric:${project.adventure_version}")
    modImplementation "maven.modrinth:xaeros-minimap:${project.xaeros_minimap_version}"

    include modImplementation("io.github.0x3c50.renderer:renderer-fabric:${project.renderer_version}")
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset = "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}
